@top Program { statement }

statement {
  LabelDefinition |
  (
  InstructionStatement |
  DirectiveStatement |
  MacroDefinition |
  Comment
  ) (';' | '\n')
}


InstructionStatement {
  Prefix* (Opcode commaSep<Register | Immediate | Memory>)?
}

DirectiveStatement {
  Directive commaSep<Expression | FullString>
}

Immediate {
  '$' Expression
}

Memory {
  Relative | Relative? '(' commaSep<()> ')'
}

@tokens {
  word { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  opcode { word }
  register { '%' std.whitespace* word }
  directive { '.' word }
  Comment { '#' ![\n]* }
  LabelDefinition { word std.whitespace* ':' }
  MacroDefinition { word std.whitespace* "=" ![\n]* }
  CharString { "'" (![\\\n'] | "\\" _)* "'"? }
  FullString { '"' (![\\\n"] | "\\" _)* '"'? }
  Number { ('0x' $[0-9a-fA-F]+) | std.digit+ }
  Unary { '+' | '-' | '~' | '!' }
  Operator { $[+\-/*%|&^<>!] | '||' | '&&' | '>>' | '<<' | '<>' | '==' | '!=' | '>=' | '<='}
  Expression { Unary* '('* (Number | CharString | word) (')'* | (Operator Expression)) }
  Relative { Expression }

  @precedence { MacroDefinition, LabelDefinition, opcode }
  @precedence { Relative, '(' }
}

commaSep<content> {
  "" | content ("," content?)*
}

@external specialize {opcode} isOpcode from "./asmPlugin" { Opcode, Prefix }
@external specialize {register} isRegister from "./asmPlugin" { Register }
@external specialize {directive} isDirective from "./asmPlugin" { Directive }