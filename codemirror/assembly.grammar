@top Program { statement+ }

statement {
  LabelDefinition |
  (
  InstructionStatement |
  DirectiveStatement |
  SymbolDefinition |
  Comment
  ) (';' | '\n')
}


InstructionStatement {
  Prefix* VEXRound? (
    (Opcode commaSep<(Register | Immediate | Relative | Memory) VEXMask?>)
    |
    (RelOpcode (('*' (Register | Relative | Memory)) | Register | Expression | Memory))
  )?
}

DirectiveStatement {
  Directive commaSep<Expression | FullString>
}

Immediate {
  '$' Expression
}

Memory {
  Relative? '(' ("" | Register ("," (Register | Number)?)*) ')'
}

VEXRound { decorator }
VEXMask { '{' Register? '}'?}

Relative { (unary | '(')* (number | charString | word) ')'* (operator Relative)? }
Expression { (unary | '(')* (number | charString | word) ')'* (operator Expression)? }

LabelDefinition { word ':' }
SymbolDefinition { word '=' Expression }

@tokens {
  word { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  register { '%' std.whitespace* word }
  directive { '.' word }
  Comment { '#' ![\n]* }
  charString { "'" (![\\\n'] | "\\" _)* "'"? }
  FullString { '"' (![\\\n"] | "\\" _)* '"'? }
  number { ('0x' $[0-9a-fA-F]+) | ('0o' $[0-7]+) | ('0b' $[0-1]+) | $[0-9.]+ ('e' $[0-9]+)? }
  Number { number }
  unary { '+' | '-' | '~' | '!' }
  operator { $[+\-/*%|&^<>!] | '||' | '&&' | '>>' | '<<' | '<>' | '==' | '!=' | '>=' | '<='}
  decorator { '{' ![}]* '}'? }
}

commaSep<content> {
  "" | content ("," content?)*
}

@external specialize {word} CM_isOpcode from "./asmPlugin" { Opcode, RelOpcode, Prefix }
@external specialize {register} CM_isRegister from "./asmPlugin" { Register }
@external specialize {directive} CM_isDirective from "./asmPlugin" { Directive }
